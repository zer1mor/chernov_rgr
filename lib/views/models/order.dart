  import 'package:cloud_firestore/cloud_firestore.dart';

  // –°—É—â–Ω–æ—Å—Ç—å "–ó–∞–∫–∞–∑"
  class Order {
    final String userId;
    final String clientName;
    final String productName;
    final String clientAddress;
    final String clientContact;
    final Transport? transport;
    final District? district;
    final CargoSize? cargoSize;
    final double buyPrice;
    final double amountWorkers;
    final String sellDate;
    final DateTime date;

    Order({
      required this.userId,
      required this.clientName,
      required this.productName,
      required this.clientAddress,
      required this.clientContact,
      this.transport,
      this.district,
      this.cargoSize,
      required this.buyPrice,
      required this.amountWorkers,
      required this.sellDate,
      required this.date,
    });

    Map<String, dynamic> toMap() {
      return {
        "userId": userId,
        "clientName": clientName,
        "productName": productName,
        "clientAddress": clientAddress,
        "clientContact": clientContact,
        "transport": transport?.name ?? "",
        "district": district?.name ?? "",
        "cargoSize": cargoSize?.label ?? "",
        "buyPrice": buyPrice,
        "amountWorkers": amountWorkers,
        "sellDate": sellDate,
        "date": date.toIso8601String(),
      };
    }

    factory Order.fromFirestore(DocumentSnapshot doc) {
      Map data = doc.data() as Map<String, dynamic>;
      return Order(
        userId: data["userId"] ?? "",
        clientName: data["clientName"] ?? "",
        productName: data["productName"] ?? "",
        clientAddress: data["clientAddress"] ?? "",
        clientContact: data["clientContact"] ?? "",
        transport: data["transport"] != "" ? Transport(data["transport"]) : null,
        district: data["district"] != "" ? District(data["district"]) : null,
        cargoSize: data["cargoSize"] != "" ? CargoSize(data["cargoSize"]) : null,
        buyPrice: (data["buyPrice"] ?? 0).toDouble(),
        amountWorkers: (data["amountWorkers"] ?? 0).toDouble(),
        sellDate: data["sellDate"] ?? "",
        date: DateTime.parse(data["date"] ?? DateTime.now().toIso8601String()),
      );
    }
  }

  class OrderService {
    static final FirebaseFirestore _db = FirebaseFirestore.instance;

    static Future<void> createOrder(Order order) async {
      await _db.collection("orders").add(order.toMap());
    }

    static Stream<List<Order>> getUserOrders(String userId) {
      return _db
          .collection("orders")
          .where("userId", isEqualTo: userId) // üëà –§–∏–ª—å—Ç—Ä –ø–æ userId
          .snapshots()
          .map((snapshot) =>
          snapshot.docs.map((doc) => Order.fromFirestore(doc)).toList());
    }
  }

  // –°—É—â–Ω–æ—Å—Ç—å "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
  class Transport {
    final String name;
    Transport(this.name);

    @override
    String toString() => name;
  }

  class TransportService {
    static Future<List<Transport>> getTransports() async {
      return [
        Transport("S: –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä–æ–±–æ–∫ (–¥–æ 300–∫–≥)"),
        Transport("M: –£–≤–µ–∑—ë—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –∏ –¥–∏–≤–∞–Ω (–¥–æ 700–∫–≥)"),
        Transport("L: –ü–æ–º–æ–∂–µ—Ç –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É (–¥–æ 1400–∫–≥)"),
        Transport("XL: –ü–æ–¥–æ–π–¥—ë—Ç –¥–ª—è —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–¥–æ 2000–∫–≥)"),
      ];
    }
  }

  // –°—É—â–Ω–æ—Å—Ç—å "–†–∞–π–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"
  class District {
    final String name;
    District(this.name);

    @override
    String toString() => name;
  }

  class DistrictService {
    static Future<List<District>> getDistricts() async {
      return [
        District("–õ–µ–Ω–∏–Ω—Å–∫–∏–π"),
        District("–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π"),
        District("–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π"),
        District("–ö–∏—Ä–æ–≤—Å–∫–∏–π"),
        District("–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π"),
        District("–ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–∏–π"),
        District("–°–æ–≤–µ—Ç—Å–∫–∏–π"),
        District("–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π"),
        District("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"),
        District("–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π"),
        District("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
      ];
    }
  }

  // –°—É—â–Ω–æ—Å—Ç—å "–ì–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞"
  class CargoSize {
    final String label;
    CargoSize(this.label);

    @override
    String toString() => label;
  }

  class CargoSizeService {
    static Future<List<CargoSize>> getCargoSizes() async {
      return [
        CargoSize("–ú–∞–ª–µ–Ω—å–∫–∏–π (–¥–æ 300–∫–≥)"),
        CargoSize("–°—Ä–µ–¥–Ω–∏–π (–¥–æ 700–∫–≥)"),
        CargoSize("–ë–æ–ª—å—à–æ–π (–¥–æ 1400–∫–≥)"),
        CargoSize("–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π (–¥–æ 2000–∫–≥)"),
      ];
    }
  }
